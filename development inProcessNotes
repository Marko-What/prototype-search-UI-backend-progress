
Defining functionality which does fetch posted data using php super global $_POST[];
	
Cause of front end functionality does offer different options user interacting with like passing single html input data or multiple.

	
	php functionality 

		fetching data 

	if conditional in use of to verify if input data does exist inside the posted  name reference values ...

	to verify if the data does exist mean post request does pass the data 
	
	prior verfiying posted data if it does exist 

	would be better to define functionality which will does verify if the form was submitted as a multi input form or singleinput form

	and wrap the procedural functionality executing a request to interacting with the database ...
	
	
	
	
	


		
		
	



	isset conditional statement does do verify if the name reference value does exist ...
	
	whenever the conditional statement return true the name reference value do assing a value to a variable which later is in use of to assign a variable which does exist as a datapalce holder inside a pre defined sql stament which is responsible for database query so that does return the values
	
	cause of different name reference values could be passed after the submitted functionality is triggered by the user interaction with front end .
	different functionality needs to be in place
	
	
	toggling between user single input post request if conditionals are in place of to fetch specific name referenced values.
		
	serves of equal to each-single-search option does execute single form posted data.
	
	all-search option posted data does executed multiple input element form posted data 
	
	using if conditionals to verify kind of a functionality to trigger in use to interact with the database.
	
	if( isset($_POST['last_name']) ) {
		$queryVariable = 'last_name';
		$last_name = $_POST['last_name'];
	}
	
	
	$queryVariable variable is in use of as a dataplace holder which does exist in a sql statement holding name reference value posted data.
	Passed to post php super global to fetch the value from post request.
	
	
	if( isset($_POST['email']) && isset($_POST['contact']) && isset($_POST['last_name']) && isset($_POST['first_name']) ) {
			
}

following if conditional does  verify if all existing input html elements so that does toggle between single input element form submittion and all element form submittion.
	

wrapped functionality does fetch posted data and construct sql query 

	
single element form and multi element form toggle 
	 	
hidden form element could be in use of to define kind of a if conditional which will verify if kind of a  form is in use and base on that trigger particular wrapped functionality 
	single and multi input element form 
	
to signify multi input element form we will use hidden form field that which will be fetched on each subsequent posted request to a script.

	<input type="hidden" name="multi" value="multi>
multiform tag in use to signify form name reference value multi - multi
	

	if conditional which does wrap the multi input element form database interaction functionality does looks something like that 
	
	if( isset($_POST['multi']) {
		
		


		
		$email = mysqli_real_escape_string(isset($_POST['email']);		
		$contact = mysqli_real_escape_string(isset($_POST['contact']);

		$last_name = mysqli_real_escape_string(isset($_POST['last_name']);

		$first_name = mysqli_real_escape_string(isset($_POST['first_name']);
			
		
		
				
	} else {
		echo "the all the input fields sfds "	
	}



	}
	
	if conditional in use of to verfiy if all the form input elements does holds a value wrap the inputput value posted  data sanitization functionality 
	
	else wrapped functionality needs to return something to notify the user that all the form input fields must be filled up 
	front end functionality also responsible .. really does depends on a function needs ....
	
	
	
	

	following functionality is responsible for executing request to a database fetching the values

<?php
$query = "SELECT $email, $contact, $last_name ";
$query .= "FROM tableName ";
$query .= "WHERE $email ={$_POST[$email]} ";
$query .= "AND  $contact = {$_POST[$contact]} ";
$query .= "AND  $last_name  = {$_POST[$last_name]} ";
$query .= "ORDER BY position DESC";



sql where clause referencing multiple column names values could be referenced multiple ways using binding method or comparison operator in combination with sql AND operator ...



$result = mysqli_query($connection, $query);
// test if there is some query error ...
if (!$result){
	die("database connection query failed");
}
?>
	

<?php

	function multiInputSqlQuery(){

	$query = "SELECT $email, $contact, $last_name ";
	$query .= "FROM tableName ";
	$query .= "WHERE $email ={$_POST[$email]} "; /*  */
	$query .= "AND  $contact = {$_POST[$contact]} ";
	$query .= "AND  $last_name  = {$_POST[$last_name]} ";
	$query .= "ORDER BY position DESC";



		
		$result = mysqli_query($connection, $query);
		// test if there is some query error ...
		if (!$result){
			die("database connection query failed");
		} else {
			return $result;	
		}

			
	}

	
	
	
	setting up lamp-server environment 
using following commands 
	sudo apt-get install lamp-server^ to install lamp-server setup
	sudo add-apt repository universe to upgrade repository 
	sudo apt-get update
	sudo apt-get install phpmyadmin   

	and configure phpmyadmin so that that enable phpmyadim configuration 
	
	 cd /etc
	sudo cp -R /phpmyadmin/phpmyadmin.conf /etc/php7.0/conf-enable/phpmyadmin.conf
	
	-R does stands for reculsive cp folders/subfolders
	
	
?>
	




	if conditional which does wrap multiInput database request functionality definition
	

	if($_POST[])
	







	type of records


 eloqua
 salesforce	


 both

	user interacting with front end does select type of records to be returned
		

	place the hidden form field in both of a forms 

	
	<input id="searchType" type="hidden" name="searchType" value="">


	jQuery functionality will be reponsible for to assiging a value based on user interaction with the fron end selecting serach type and executing search clicking select search option type.
	
	
	$('select#search').on('click', function(){
		searchType = $('input#searchType').val();	
		$('input#searchType').attr('value', searchType)	
	});
	



form fields 
	name references
		first_name
		last_name
		contact
		email
	
hidden fields
		searchType
		multi

		
		

	

 database SampleData

	tableName
		SampleDataTable
	
	columnNames
		id (int)
		first_name varchar64
		last_name varchar64
		email 	  varchar(60)
		type_of_record varchar(32)

	

tester
last_tester
tester@gmail.com
salesforce
eloqua




INSERT INTO `SampleDataTable` (`id`, `first_name`, `last_name`, `type_of_record`, `email`) VALUES (NULL, 'tester', 'last_tester', 'salesforce', 'tester@gmail.com');

SELECT * FROM `SampleDataTable` WHERE `id` 

  

